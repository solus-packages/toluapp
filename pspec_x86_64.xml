<PISI>
    <Source>
        <Name>toluapp</Name>
        <Packager>
            <Name>Joshua Strobl</Name>
            <Email>joshua@stroblindustries.com</Email>
        </Packager>
        <License>MIT</License>
        <PartOf>programming.tools</PartOf>
        <Summary xml:lang="en">tolua++ is an extension of toLua, a tool to integrate C/Cpp code with Lua</Summary>
        <Description xml:lang="en">tolua is a tool that greatly simplifies the integration of C/C++ code with Lua. Based on a &quot;cleaned&quot; header file, tolua automatically generates the binding code to access C/C++ features from Lua. Using Lua-5.0 API and metamethod facilities, the current version automatically maps C/C++ constants, external variables, functions, namespace, classes, and methods to Lua. It also provides facilities to create Lua modules.
</Description>
        <Archive type="binary" sha1sum="79eb0752a961b8e0d15c77d298c97498fbc89c5a">https://solus-project.com/sources/README.Solus</Archive>
    </Source>
    <Package>
        <Name>toluapp</Name>
        <Summary xml:lang="en">tolua++ is an extension of toLua, a tool to integrate C/Cpp code with Lua</Summary>
        <Description xml:lang="en">tolua is a tool that greatly simplifies the integration of C/C++ code with Lua. Based on a &quot;cleaned&quot; header file, tolua automatically generates the binding code to access C/C++ features from Lua. Using Lua-5.0 API and metamethod facilities, the current version automatically maps C/C++ constants, external variables, functions, namespace, classes, and methods to Lua. It also provides facilities to create Lua modules.
</Description>
        <PartOf>programming.tools</PartOf>
        <Files>
            <Path fileType="library">/usr/lib/lib*.so</Path>
        </Files>
    </Package>
    <Package>
        <Name>toluapp-devel</Name>
        <Summary xml:lang="en">Development files for toluapp</Summary>
        <Description xml:lang="en">tolua is a tool that greatly simplifies the integration of C/C++ code with Lua. Based on a &quot;cleaned&quot; header file, tolua automatically generates the binding code to access C/C++ features from Lua. Using Lua-5.0 API and metamethod facilities, the current version automatically maps C/C++ constants, external variables, functions, namespace, classes, and methods to Lua. It also provides facilities to create Lua modules.
</Description>
        <PartOf>programming.devel</PartOf>
        <RuntimeDependencies>
            <Dependency release="4">toluapp</Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="executable">/usr/bin</Path>
            <Path fileType="header">/usr/include/</Path>
            <Path fileType="data">/usr/share/toluapp</Path>
        </Files>
    </Package>
    <History>
        <Update release="4">
            <Date>2017-09-16</Date>
            <Version>1.0.93</Version>
            <Comment>Packaging update</Comment>
            <Name>Joshua Strobl</Name>
            <Email>joshua@stroblindustries.com</Email>
        </Update>
    </History>
</PISI>